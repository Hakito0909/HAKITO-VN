#!/usr/bin/env python3
# golike_linkedin_appium.py
import os
import time
import json
import requests
from appium import webdriver
from selenium.webdriver.common.by import By

# ========== CONFIG ==========
APPIUM_SERVER = "http://127.0.0.1:4723/wd/hub"
PLATFORM_NAME = "Android"
DEVICE_NAME = "Android"          # termux on-device: generic name ok
AUTOMATION_NAME = "UiAutomator2"
LINKEDIN_PACKAGE = "com.linkedin.android"
# If you want Appium to NOT reinstall and keep login state:
NO_RESET = True
# ============================

def create_driver():
    caps = {
        "platformName": PLATFORM_NAME,
        "deviceName": DEVICE_NAME,
        "automationName": AUTOMATION_NAME,
        "appPackage": LINKEDIN_PACKAGE,
        # appActivity can be omitted; Appium will start the package
        "noReset": NO_RESET,
        "autoGrantPermissions": True
    }
    driver = webdriver.Remote(APPIUM_SERVER, caps)
    driver.implicitly_wait(5)
    return driver

# ---------- GoLike API helpers ----------
def get_job(auth, account_id):
    headers = {
        "Authorization": auth,
        "t": "VFZSWk5VOUVVVEJQUkZGNFRXYzlQUT09",
        "User-Agent": "ok"
    }
    try:
        resp = requests.get(
            f"https://gateway.golike.net/api/advertising/publishers/linkedin/jobs?account_id={account_id}&data=null",
            headers=headers, timeout=15
        )
        data = resp.json()
        # Expect structure similar to earlier: {'data': {...}, 'lock': {...}, ...}
        return data.get("data")
    except Exception as e:
        print("‚ùå L·ªói get_job:", e)
        return None

def report_job_complete(auth, account_id, ads_id):
    headers = {
        "Authorization": auth,
        "t": "VFZSWk5VOUVVVEJQUkZGNFRXYzlQUT09",
        "User-Agent": "ok"
    }
    json_data = {"ads_id": ads_id, "account_id": account_id, "async": True, "data": None}
    try:
        resp = requests.post(
            "https://gateway.golike.net/api/advertising/publishers/linkedin/complete-jobs",
            headers=headers, json=json_data, timeout=15
        )
        return resp.json()
    except Exception as e:
        print("‚ùå L·ªói report_job_complete:", e)
        return None

def skip_job(auth, account_id, ads_id, object_id, job_type):
    headers = {
        "Authorization": auth,
        "t": "VFZSWk5VOUVVVEJQUkZGNFRXYzlQUT09",
        "User-Agent": "ok"
    }
    json_data = {
        "ads_id": ads_id,
        "object_id": object_id,
        "account_id": account_id,
        "type": job_type
    }
    try:
        requests.post("https://gateway.golike.net/api/advertising/publishers/linkedin/skip-jobs", headers=headers, json=json_data, timeout=10)
    except Exception as e:
        print("‚ùå L·ªói skip_job:", e)

# ---------- Mobile actions ----------
def open_link_in_app(link):
    """
    Tr√™n ch√≠nh thi·∫øt b·ªã Android (Termux), d√πng am start ƒë·ªÉ m·ªü link.
    """
    cmd = f'am start -a android.intent.action.VIEW -d "{link}"'
    print("üîó M·ªü link b·∫±ng intent:", link)
    os.system(cmd)

def find_and_click_follow(driver):
    """
    Th·ª≠ nhi·ªÅu selector kh√°c nhau ƒë·ªÉ t√¨m n√∫t Follow/Theo d√µi/K·∫øt n·ªëi.
    Tr·∫£ v·ªÅ True n·∫øu click th√†nh c√¥ng.
    """
    tries = [
        # ti·∫øng Anh
        'new UiSelector().textContains("Follow")',
        'new UiSelector().text("Follow")',
        # ti·∫øng Vi·ªát (n·∫øu LinkedIn hi·ªÉn th·ªã ti·∫øng Vi·ªát)
        'new UiSelector().textContains("Theo d√µi")',
        'new UiSelector().textContains("K·∫øt n·ªëi")',
        # th·ª≠ theo content-desc / description ch·ª©a Follow
        'new UiSelector().descriptionContains("Follow")',
        # theo class v√† clickable
        'new UiSelector().clickable(true).className("android.widget.Button")'
    ]

    for sel in tries:
        try:
            els = driver.find_elements(By.ANDROID_UIAUTOMATOR, sel)
            if not els:
                continue
            # th·ª≠ click element n√†o c√≥ text "Follow" ho·∫∑c clickable
            for el in els:
                try:
                    txt = el.text or ""
                    print("  ‚Üí T√¨m th·∫•y button:", txt)
                    # if it's clearly not a disabled state, click
                    el.click()
                    time.sleep(1)
                    return True
                except Exception as e:
                    # th·ª≠ ti·∫øp
                    print("   ‚ö†Ô∏è Click l·ªói:", e)
                    continue
        except Exception as e:
            # n·∫øu selector l·ªói, b·ªè qua
            continue
    # n·∫øu kh√¥ng t√¨m th·∫•y
    return False

# ---------- Main flow ----------
def main():
    print("=== GoLike LinkedIn Auto Follow (Appium on Termux) ===")
    auth = input("Nh·∫≠p AUTH GoLike: ").strip()
    account_id = input("Nh·∫≠p account_id LinkedIn trong GoLike: ").strip()
    delay = int(input("Delay gi·ªØa job (gi√¢y): ").strip() or "3")
    max_jobs = int(input("S·ªë job t·ªëi ƒëa (max): ").strip() or "20")

    print("Kh·ªüi t·∫°o Appium driver...")
    try:
        driver = create_driver()
    except Exception as e:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Appium server:", e)
        return

    done = 0
    consecutive_fail = 0
    while done < max_jobs:
        job = get_job(auth, account_id)
        if not job:
            print("‚è≥ Kh√¥ng l·∫•y ƒë∆∞·ª£c job (None). Th·ª≠ l·∫°i sau 3s.")
            time.sleep(3)
            continue

        # job c√≥ th·ªÉ l√† dict (data)
        # ki·ªÉm tra job type
        job_type = job.get("type") if isinstance(job, dict) else None
        ads_id = job.get("id") if isinstance(job, dict) else None
        object_id = job.get("lock", {}).get("object_id") if isinstance(job, dict) else None
        link = job.get("link") if isinstance(job, dict) else None

        print(f"\n[JOB] id={ads_id} | type={job_type} | link={link}")

        # Ch·ªâ ch·∫°y follow
        if job_type != "follow":
            print(f"‚ö†Ô∏è B·ªè qua job type={job_type} (ch·ªâ ch·∫°y follow).")
            skip_job(auth, account_id, ads_id, object_id, job_type or "unknown")
            time.sleep(1)
            continue

        if not link:
            print("‚ö†Ô∏è Link job r·ªóng, skip.")
            skip_job(auth, account_id, ads_id, object_id, job_type)
            time.sleep(1)
            continue

        # M·ªü link v√†o LinkedIn app
        open_link_in_app(link)
        # ch·ªù app load
        print("‚è≥ ƒê·ª£i app load ...")
        time.sleep(5 + random.randint(1,3))

        # Th·ª≠ t√¨m v√† click Follow nhi·ªÅu l·∫ßn
        clicked = False
        for attempt in range(3):
            try:
                clicked = find_and_click_follow(driver)
                if clicked:
                    print("‚úÖ ƒê√£ click Follow (attempt {})".format(attempt+1))
                    break
                else:
                    print("‚ö†Ô∏è Ch∆∞a t√¨m th·∫•y n√∫t Follow (attempt {})".format(attempt+1))
                time.sleep(2)
            except Exception as e:
                print("‚ö†Ô∏è L·ªói khi click follow:", e)
                time.sleep(2)

        if not clicked:
            print("‚ùå Kh√¥ng th·ªÉ nh·∫•n Follow, s·∫Ω Skip job ƒë·ªÉ tr√°nh b·ªã kh√≥a.")
            skip_job(auth, account_id, ads_id, object_id, job_type)
            consecutive_fail += 1
            if consecutive_fail >= 10:
                print("‚ö†Ô∏è L·ªói li√™n ti·∫øp nhi·ªÅu, d·ª´ng l·∫°i ƒë·ªÉ ki·ªÉm tra.")
                break
            time.sleep(delay)
            continue

        # N·∫øu click th√†nh c√¥ng, b√°o v·ªÅ GoLike
        res = report_job_complete(auth, account_id, ads_id)
        if res and res.get("status") == 200:
            done += 1
            consecutive_fail = 0
            price = res.get("data", {}).get("prices", "0")
            print(f"üéâ Ho√†n t·∫•t job {done}/{max_jobs} ‚Äî +{price} xu")
        else:
            print("‚ö†Ô∏è API b√°o kh√¥ng th√†nh c√¥ng khi report job:", res)
            # th·ª≠ skip ƒë·ªÉ tr√°nh l·∫∑p
            skip_job(auth, account_id, ads_id, object_id, job_type)
            consecutive_fail += 1

        # ƒë·ª£i tr∆∞·ªõc job ti·∫øp theo
        time.sleep(delay)

    print("‚úÖ Ho√†n th√†nh qu√° tr√¨nh (ho·∫∑c ƒë·∫°t max job).")
    try:
        driver.quit()
    except:
        pass

if __name__ == "__main__":
    main()
